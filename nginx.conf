events {}
http {

  sendfile on;

  server {

    # Since we are using the proxy_pass directive to proxy requests to backend servers
    # we want to change the proxy_http_version from the default 1.0 to 1.1 which is a
    # requirement for keepalive and WebSocket connections...
    proxy_http_version 1.1;

    listen 0.0.0.0:80;
    #listen 0.0.0.0:443 ssl;
    # certs
    #ssl_certificate /etc/nginx/certs/server-crt.crt;
    #ssl_certificate_key /etc/nginx/certs/server-key.key;

    # When trying to upload files, you might reach the maximum allowed POST size we can avoid any error
    # because of that by increasing the client_max_body_size directive from the default of 1MB
    client_max_body_size 4G;

    server_name example.com;

    # Virtual host root so we are pointing to the right document root, using the root directive
    # root /usr/share/nginx/html;

    # if we have a lot of large POST requests (larger than the default 8/16KB) we will benefit
    # from configuring the client_body_buffer_size directive as they will otherwise be written
    # to a temporary file on disk
    client_body_buffer_size 1m;

    # for when the cookie in header of the response exceeds the default size of 8KB
    # large_client_header_buffers 3; needs right syntax needs more aguments it says in logs

    #location / {
     # try_files $uri/index.html $uri.html $uri @app;
   # }

    location / {
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass_request_headers on;
      proxy_set_header Upgrade    $http_upgrade;
      proxy_set_header Connection $http_connection;
      proxy_pass http://localhost;
    }

    

    location /init {
      proxy_method POST;
      proxy_set_header content-type "application/json";
      proxy_pass http://action:3000/init;
    }

    location /run {
      proxy_method POST;
      proxy_set_header content-type "application/json";
      proxy_pass http://action:3000/run;
    }

        
    location /static {
      # path for static files
      root /path/to/app/static;
    }
#
# Wide-open CORS config for nginx
#
location /* {
     if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        #
        # Custom headers and headers various browsers *should* be OK with but aren't
        #
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
     }
     if ($request_method = 'POST') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
     }
     if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
     }
}



  }

  upstream localhost {
    server localhost:80;
  }

}